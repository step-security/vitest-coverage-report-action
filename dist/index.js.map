{
  "version": 3,
  "sources": ["../src/index.ts", "../src/inputs/FileCoverageMode.ts", "../src/inputs/getPullChanges.ts", "../src/inputs/options.ts", "../src/inputs/getCommitSHA.ts", "../src/inputs/getPullRequestNumber.ts", "../src/inputs/getViteConfigPath.ts", "../src/inputs/parseCoverageThresholds.ts", "../src/inputs/getCommentOn.ts", "../src/inputs/parseJsonReports.ts", "../src/octokit.ts", "../src/report/generateCommitSHAUrl.ts", "../src/report/generateFileCoverageHtml.ts", "../src/report/generateFileUrl.ts", "../src/report/getUncoveredLinesFromStatements.ts", "../src/report/generateHeadline.ts", "../src/report/generateSummaryTableHtml.ts", "../src/icons.ts", "../src/writeSummaryToComment.ts", "../src/writeSummaryToPR.ts"],
  "sourcesContent": ["import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { FileCoverageMode } from \"./inputs/FileCoverageMode.js\";\nimport { getPullChanges } from \"./inputs/getPullChanges.js\";\nimport { type Options, readOptions } from \"./inputs/options.js\";\nimport {\n\tparseVitestJsonFinal,\n\tparseVitestJsonSummary,\n} from \"./inputs/parseJsonReports.js\";\nimport { createOctokit, type Octokit } from \"./octokit.js\";\nimport { generateCommitSHAUrl } from \"./report/generateCommitSHAUrl.js\";\nimport { generateFileCoverageHtml } from \"./report/generateFileCoverageHtml.js\";\nimport { generateHeadline } from \"./report/generateHeadline.js\";\nimport { generateSummaryTableHtml } from \"./report/generateSummaryTableHtml.js\";\nimport type { JsonSummary } from \"./types/JsonSummary.js\";\nimport { writeSummaryToCommit } from \"./writeSummaryToComment.js\";\nimport { writeSummaryToPR } from \"./writeSummaryToPR.js\";\nimport axios, {isAxiosError} from 'axios'\nimport { aw } from \"vitest/dist/chunks/reporters.C_zwCd4j.js\";\n\nasync function validateSubscription(): Promise<void> {\n\tconst API_URL = `https://agent.api.stepsecurity.io/v1/github/${process.env.GITHUB_REPOSITORY}/actions/subscription`\n  \n\ttry {\n\t  await axios.get(API_URL, {timeout: 3000})\n\t} catch (error) {\n\t  if (isAxiosError(error) && error.response) {\n\t\tcore.error(\n\t\t  'Subscription is not valid. Reach out to support@stepsecurity.io'\n\t\t)\n\t\tprocess.exit(1)\n\t  } else {\n\t\tcore.info('Timeout or API not reachable. Continuing to next step.')\n\t  }\n\t}\n  }\n\ntype GitHubSummary = typeof core.summary;\n\nconst run = async () => {\n\tawait validateSubscription()\n\tconst octokit = createOctokit();\n\n\tconst options = await readOptions(octokit);\n\tcore.info(`Using options: ${JSON.stringify(options, null, 2)}`);\n\n\tconst jsonSummary = await parseVitestJsonSummary(options.jsonSummaryPath);\n\n\tlet jsonSummaryCompare: JsonSummary | undefined;\n\tif (options.jsonSummaryComparePath) {\n\t\tjsonSummaryCompare = await parseVitestJsonSummary(\n\t\t\toptions.jsonSummaryComparePath,\n\t\t);\n\t}\n\n\tconst summary = core.summary\n\t\t.addHeading(\n\t\t\tgenerateHeadline({\n\t\t\t\tworkingDirectory: options.workingDirectory,\n\t\t\t\tname: options.name,\n\t\t\t}),\n\t\t\t2,\n\t\t)\n\t\t.addRaw(\n\t\t\tgenerateSummaryTableHtml(\n\t\t\t\tjsonSummary.total,\n\t\t\t\toptions.thresholds,\n\t\t\t\tjsonSummaryCompare?.total,\n\t\t\t),\n\t\t);\n\n\tif (options.fileCoverageMode !== FileCoverageMode.None) {\n\t\tconst pullChanges = await getPullChanges({\n\t\t\tfileCoverageMode: options.fileCoverageMode,\n\t\t\tprNumber: options.prNumber,\n\t\t\toctokit,\n\t\t});\n\n\t\tconst jsonFinal = await parseVitestJsonFinal(options.jsonFinalPath);\n\t\tconst fileTable = generateFileCoverageHtml({\n\t\t\tjsonSummary,\n\t\t\tjsonFinal,\n\t\t\tfileCoverageMode: options.fileCoverageMode,\n\t\t\tpullChanges,\n\t\t\tcommitSHA: options.commitSHA,\n\t\t});\n\t\tsummary.addDetails(\"File Coverage\", fileTable);\n\t}\n\n\tconst commitSHAUrl = generateCommitSHAUrl(options.commitSHA);\n\n\tsummary.addRaw(\n\t\t`<em>Generated in workflow <a href=${getWorkflowSummaryURL()}>#${github.context.runNumber}</a> for commit <a href=\"${commitSHAUrl}\">${options.commitSHA.substring(0, 7)}</a> by the <a href=\"https://github.com/davelosert/vitest-coverage-report-action\">Vitest Coverage Report Action</a></em>`,\n\t);\n\n\tif (options.commentOn.includes(\"pr\")) {\n\t\tawait commentOnPR(octokit, summary, options);\n\t}\n\n\tif (options.commentOn.includes(\"commit\")) {\n\t\tawait commentOnCommit(octokit, summary, options);\n\t}\n\n\tawait summary.write();\n};\n\nasync function commentOnPR(\n\toctokit: Octokit,\n\tsummary: GitHubSummary,\n\toptions: Options,\n) {\n\ttry {\n\t\tawait writeSummaryToPR({\n\t\t\toctokit,\n\t\t\tsummary,\n\t\t\tmarkerPostfix: getMarkerPostfix({\n\t\t\t\tname: options.name,\n\t\t\t\tworkingDirectory: options.workingDirectory,\n\t\t\t}),\n\t\t\tprNumber: options.prNumber,\n\t\t});\n\t} catch (error) {\n\t\tif (\n\t\t\terror instanceof RequestError &&\n\t\t\t(error.status === 404 || error.status === 403)\n\t\t) {\n\t\t\tcore.warning(\n\t\t\t\t`Couldn't write a comment to the pull request. Please make sure your job has the permission 'pull-request: write'.\n                 Original Error was: [${error.name}] - ${error.message}`,\n\t\t\t);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nasync function commentOnCommit(\n\toctokit: Octokit,\n\tsummary: GitHubSummary,\n\toptions: Options,\n) {\n\ttry {\n\t\tawait writeSummaryToCommit({\n\t\t\toctokit,\n\t\t\tsummary,\n\t\t\tcommitSha: options.commitSHA,\n\t\t});\n\t} catch (error) {\n\t\tif (\n\t\t\terror instanceof RequestError &&\n\t\t\t(error.status === 404 || error.status === 403)\n\t\t) {\n\t\t\tcore.warning(\n\t\t\t\t`Couldn't write a comment to the commit. Please make sure your job has the permission 'contents: read'.\n                 Original Error was: [${error.name}] - ${error.message}`,\n\t\t\t);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nfunction getMarkerPostfix({\n\tname,\n\tworkingDirectory,\n}: { name: string; workingDirectory: string }) {\n\tif (name) return name;\n\tif (workingDirectory !== \"./\") return workingDirectory;\n\treturn \"root\";\n}\n\nfunction getWorkflowSummaryURL() {\n\tconst { owner, repo } = github.context.repo;\n\tconst { runId } = github.context;\n\treturn `${github.context.serverUrl}/${owner}/${repo}/actions/runs/${runId}`;\n}\n\nrun()\n\t.then(() => {\n\t\tcore.info(\"Report generated successfully.\");\n\t})\n\t.catch((err) => {\n\t\tcore.error(err);\n\t});\n", "import * as core from \"@actions/core\";\n\nenum FileCoverageMode {\n\tAll = \"all\",\n\tChanges = \"changes\",\n\tNone = \"none\",\n}\n\nfunction getCoverageModeFrom(input: string): FileCoverageMode {\n\tconst allEnums = Object.values(FileCoverageMode) as string[];\n\tconst index = allEnums.indexOf(input);\n\tif (index === -1) {\n\t\tcore.warning(`Not valid value \"${input}\" for summary mode, used \"changes\"`);\n\t\treturn FileCoverageMode.Changes;\n\t}\n\treturn input as FileCoverageMode;\n}\n\nexport { FileCoverageMode, getCoverageModeFrom };\n", "import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport { RequestError } from \"@octokit/request-error\";\nimport type { Octokit } from \"../octokit\";\nimport { FileCoverageMode } from \"./FileCoverageMode\";\n\ninterface Params {\n\tfileCoverageMode: FileCoverageMode;\n\tprNumber?: number;\n\toctokit: Octokit;\n}\n\nexport async function getPullChanges({\n\tfileCoverageMode,\n\tprNumber,\n\toctokit,\n}: Params): Promise<string[]> {\n\t// Skip Changes collection if we don't need it\n\tif (fileCoverageMode === FileCoverageMode.None) {\n\t\treturn [];\n\t}\n\n\tif (!prNumber) {\n\t\treturn [];\n\t}\n\n\ttry {\n\t\tconst paths: string[] = [];\n\n\t\tcore.startGroup(\n\t\t\t`Fetching list of changed files for PR#${prNumber} from Github API`,\n\t\t);\n\n\t\tconst iterator = octokit.paginate.iterator(octokit.rest.pulls.listFiles, {\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tpull_number: prNumber,\n\t\t\tper_page: 100,\n\t\t});\n\n\t\tfor await (const response of iterator) {\n\t\t\tcore.info(`Received ${response.data.length} items`);\n\n\t\t\tfor (const file of response.data) {\n\t\t\t\tcore.debug(`[${file.status}] ${file.filename}`);\n\t\t\t\tif ([\"added\", \"modified\"].includes(file.status)) {\n\t\t\t\t\tpaths.push(file.filename);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t} catch (error) {\n\t\tif (\n\t\t\terror instanceof RequestError &&\n\t\t\t(error.status === 404 || error.status === 403)\n\t\t) {\n\t\t\tcore.warning(\n\t\t\t\t`Couldn't fetch changes of PR due to error:\\n[${error.name}]\\n${error.message}`,\n\t\t\t);\n\t\t\treturn [];\n\t\t}\n\n\t\tthrow error;\n\t} finally {\n\t\tcore.endGroup();\n\t}\n}\n", "import * as path from \"node:path\";\nimport * as core from \"@actions/core\";\nimport type { Octokit } from \"../octokit\";\nimport type { Thresholds } from \"../types/Threshold\";\nimport { type FileCoverageMode, getCoverageModeFrom } from \"./FileCoverageMode\";\nimport { getCommitSHA } from \"./getCommitSHA\";\nimport { getPullRequestNumber } from \"./getPullRequestNumber\";\nimport { getViteConfigPath } from \"./getViteConfigPath\";\nimport { parseCoverageThresholds } from \"./parseCoverageThresholds\";\nimport { getCommentOn, type CommentOn } from \"./getCommentOn\";\nimport { report } from \"node:process\";\n\ntype Options = {\n\tfileCoverageMode: FileCoverageMode;\n\tjsonFinalPath: string;\n\tjsonSummaryPath: string;\n\tjsonSummaryComparePath: string | null;\n\tname: string;\n\tthresholds: Thresholds;\n\tworkingDirectory: string;\n\tprNumber: number | undefined;\n\tcommitSHA: string;\n\tcommentOn: Array<CommentOn>;\n};\n\nasync function readOptions(octokit: Octokit): Promise<Options> {\n\t// Working directory can be used to modify all default/provided paths (for monorepos, etc)\n\tconst workingDirectory = core.getInput(\"working-directory\");\n\n\tconst fileCoverageModeRaw = core.getInput(\"file-coverage-mode\"); // all/changes/none\n\tconst fileCoverageMode = getCoverageModeFrom(fileCoverageModeRaw);\n\n\tconst jsonSummaryPath = path.resolve(\n\t\tworkingDirectory,\n\t\tcore.getInput(\"json-summary-path\"),\n\t);\n\n\tconst jsonFinalPath = path.resolve(\n\t\tworkingDirectory,\n\t\tcore.getInput(\"json-final-path\"),\n\t);\n\n\tconst jsonSummaryCompareInput = core.getInput(\"json-summary-compare-path\");\n\tlet jsonSummaryComparePath: string | null = null;\n\tif (jsonSummaryCompareInput) {\n\t\tjsonSummaryComparePath = path.resolve(\n\t\t\tworkingDirectory,\n\t\t\tjsonSummaryCompareInput,\n\t\t);\n\t}\n\n\tconst name = core.getInput(\"name\");\n\n\tconst commentOn = getCommentOn();\n\n\t// ViteConfig is optional, as it is only required for thresholds. If no vite config is provided, we will not include thresholds in the final report.\n\tconst viteConfigPath = await getViteConfigPath(\n\t\tworkingDirectory,\n\t\tcore.getInput(\"vite-config-path\"),\n\t);\n\n\tconst thresholds = viteConfigPath\n\t\t? await parseCoverageThresholds(viteConfigPath)\n\t\t: {};\n\n\tconst commitSHA = getCommitSHA();\n\n\tlet prNumber: number | undefined = undefined;\n\tif (commentOn.includes(\"pr\")) {\n\t\t// Get the user-defined pull-request number and perform input validation\n\t\tprNumber = await getPullRequestNumber(octokit);\n\t}\n\n\treturn {\n\t\tfileCoverageMode,\n\t\tjsonFinalPath,\n\t\tjsonSummaryPath,\n\t\tjsonSummaryComparePath,\n\t\tname,\n\t\tthresholds,\n\t\tworkingDirectory,\n\t\tprNumber,\n\t\tcommitSHA,\n\t\tcommentOn,\n\t};\n}\n\nexport { readOptions };\n\nexport type { Options };\n", "import * as github from \"@actions/github\";\n\ntype Context = typeof github.context;\ntype Payload = Context[\"payload\"];\ntype PRPayload = NonNullable<Payload[\"pull_request\"]>;\n\ntype PRContext = Context & {\n\tpayload: Payload & {\n\t\tpull_request: PRPayload;\n\t};\n};\n\nfunction isPRContext(context: typeof github.context): context is PRContext {\n\treturn (\n\t\tcontext.eventName === \"pull_request\" ||\n\t\tcontext.eventName === \"pull_request_target\"\n\t);\n}\n\nfunction getCommitSHA(): string {\n\tif (isPRContext(github.context)) {\n\t\treturn github.context.payload.pull_request.head.sha;\n\t}\n\n\tif (github.context.eventName === \"workflow_run\") {\n\t\treturn github.context.payload.workflow_run.head_commit.id;\n\t}\n\n\t// For all other events, just return the current SHA\n\treturn github.context.sha;\n}\n\nexport { getCommitSHA };\n", "import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport type { Octokit } from \"../octokit\";\n\nasync function getPullRequestNumber(\n\toctokit: Octokit,\n): Promise<number | undefined> {\n\t// Get the user-defined pull-request number and perform input validation\n\tconst prNumberFromInput = core.getInput(\"pr-number\");\n\n\tif (prNumberFromInput === \"none\") {\n\t\tcore.info(\"prNumber set to 'none'. Comment creation will be skipped!\");\n\t\treturn undefined;\n\t}\n\n\tconst processedPrNumber: number | undefined = Number(prNumberFromInput);\n\n\t// Check if it is a full integer. Check for non-null as qhen the option is not set, the parsed input will be an empty string\n\t// which becomes 0 when parsed to a number.\n\tif (Number.isSafeInteger(processedPrNumber) && processedPrNumber !== 0) {\n\t\tcore.info(`Received pull-request number: ${processedPrNumber}`);\n\t\treturn processedPrNumber;\n\t}\n\n\tif (github.context.payload.pull_request) {\n\t\tcore.info(\n\t\t\t`Found pull-request number in the action's \"payload.pull_request\" context: ${github.context.payload.pull_request.number}`,\n\t\t);\n\t\treturn github.context.payload.pull_request.number;\n\t}\n\n\tif (github.context.eventName === \"push\" && prNumberFromInput === \"auto\") {\n\t\tconst sha = github.context.payload.head_commit.id;\n\t\tcore.info(\n\t\t\t`Trying to find a pull-request with a head commit matching the SHA found in the action's \"payload.head_commit.id\" context (${sha}) from the GitHub API.`,\n\t\t);\n\n\t\tlet prNumber = await fetchPRsByListingPRsForCommit(octokit, sha);\n\t\tif (!prNumber) {\n\t\t\tcore.info(\n\t\t\t\t\"Couldn't find PR using the /commits/:commit_sha/pulls endpoint. Trying by listing all PRs for current repository...\",\n\t\t\t);\n\t\t\tprNumber = await fetchPRsByListingAllPRs(octokit, sha);\n\t\t}\n\n\t\treturn prNumber;\n\t}\n\n\tif (github.context.eventName === \"workflow_run\") {\n\t\t// Workflow_runs triggered from non-forked PRs will have the PR number in the payload\n\t\tif (github.context.payload.workflow_run.pull_requests.length > 0) {\n\t\t\tcore.info(\n\t\t\t\t`Found pull-request number in the action's \"payload.workflow_run\" context: ${github.context.payload.workflow_run.pull_requests[0].number}`,\n\t\t\t);\n\t\t\treturn github.context.payload.workflow_run.pull_requests[0].number;\n\t\t}\n\n\t\tconst sha = github.context.payload.workflow_run.head_sha;\n\t\t// ... in all other cases, we have to call the API to get a matching PR number\n\t\tcore.info(\n\t\t\t`Trying to find a pull-request with a head commit matchin the SHA found in the action's \"payload.workflow_run.head_sha\" context (${sha}) from the GitHub API.`,\n\t\t);\n\t\treturn await fetchPRsByListingAllPRs(\n\t\t\toctokit,\n\t\t\tgithub.context.payload.workflow_run.head_sha,\n\t\t);\n\t}\n\n\tcore.info(\"No pull-request number found. Comment creation will be skipped!\");\n\treturn undefined;\n}\n\nasync function fetchPRsByListingAllPRs(\n\toctokit: Octokit,\n\theadSha: string,\n): Promise<number | undefined> {\n\tcore.startGroup(\"Querying REST API for pull-requests.\");\n\tconst pullRequestsIterator = octokit.paginate.iterator(\n\t\toctokit.rest.pulls.list,\n\t\t{\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tper_page: 30,\n\t\t\tsort: \"updated\",\n\t\t\tdirection: \"desc\",\n\t\t},\n\t);\n\n\tfor await (const { data: pullRequests } of pullRequestsIterator) {\n\t\tcore.info(`Found ${pullRequests.length} pull-requests in this page.`);\n\t\tfor (const pullRequest of pullRequests) {\n\t\t\tcore.debug(\n\t\t\t\t`Comparing: ${pullRequest.number} sha: ${pullRequest.head.sha} with expected: ${headSha}.`,\n\t\t\t);\n\t\t\tif (pullRequest.head.sha === headSha) {\n\t\t\t\treturn pullRequest.number;\n\t\t\t}\n\t\t}\n\t}\n\tcore.endGroup();\n\tcore.info(`Could not find a pull-request for commit \"${headSha}\".`);\n\treturn undefined;\n}\n\nasync function fetchPRsByListingPRsForCommit(\n\toctokit: Octokit,\n\theadSha: string,\n): Promise<number | undefined> {\n\tcore.info(\n\t\t\"Trying to find pull-request using the /commits/:commit_sha/pulls endpoint...\",\n\t);\n\tconst { data: pullRequests } =\n\t\tawait octokit.rest.repos.listPullRequestsAssociatedWithCommit({\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tcommit_sha: headSha,\n\t\t});\n\n\tif (pullRequests.length > 0) {\n\t\tcore.info(\n\t\t\t`Found ${pullRequests.length} pull-requests associated with commit \"${headSha}\".`,\n\t\t);\n\t\treturn pullRequests[0].number;\n\t}\n\n\treturn undefined;\n}\n\nexport { getPullRequestNumber };\n", "import { constants, promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport * as core from \"@actions/core\";\nimport { stripIndent } from \"common-tags\";\n\nconst testFilePath = async (workingDirectory: string, filePath: string) => {\n\tconst resolvedPath = path.resolve(workingDirectory, filePath);\n\tawait fs.access(resolvedPath, constants.R_OK);\n\treturn resolvedPath;\n};\n\nconst defaultPaths = [\n\t\"vitest.config.ts\",\n\t\"vitest.config.mts\",\n\t\"vitest.config.cts\",\n\t\"vitest.config.js\",\n\t\"vitest.config.mjs\",\n\t\"vitest.config.cjs\",\n\t\"vite.config.ts\",\n\t\"vite.config.mts\",\n\t\"vite.config.cts\",\n\t\"vite.config.js\",\n\t\"vite.config.mjs\",\n\t\"vite.config.cjs\",\n\t\"vitest.workspace.ts\",\n\t\"vitest.workspace.mts\",\n\t\"vitest.workspace.cts\",\n\t\"vitest.workspace.js\",\n\t\"vitest.workspace.mjs\",\n\t\"vitest.workspace.cjs\",\n];\n\nconst getViteConfigPath = async (workingDirectory: string, input: string) => {\n\ttry {\n\t\tif (input === \"\") {\n\t\t\treturn await Promise.any(\n\t\t\t\tdefaultPaths.map((filePath) =>\n\t\t\t\t\ttestFilePath(workingDirectory, filePath),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn await testFilePath(workingDirectory, input);\n\t} catch (error) {\n\t\tconst searchPath = input\n\t\t\t? path.resolve(workingDirectory, input)\n\t\t\t: `any default location in \"${workingDirectory}\"`;\n\n\t\tcore.warning(stripIndent`\n          Failed to read vite config file at ${searchPath}.\n          Make sure you provide the vite-config-path option if you're using a non-default location or name of your config file.\n\n          Will not include thresholds in the final report.\n      `);\n\t\treturn null;\n\t}\n};\n\nexport { getViteConfigPath };\n", "import { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport * as core from \"@actions/core\";\nimport type { Thresholds } from \"../types/Threshold\";\n\nconst regex100 = /100\"?\\s*:\\s*true/;\nconst regexStatements = /statements\\s*:\\s*(\\d+)/;\nconst regexLines = /lines:\\s*(\\d+)/;\nconst regexBranches = /branches\\s*:\\s*(\\d+)/;\nconst regexFunctions = /functions\\s*:\\s*(\\d+)/;\n\nconst parseCoverageThresholds = async (\n\tvitestConfigPath: string,\n): Promise<Thresholds> => {\n\ttry {\n\t\tconst resolvedViteConfigPath = path.resolve(\n\t\t\tprocess.cwd(),\n\t\t\tvitestConfigPath,\n\t\t);\n\t\tconst rawContent = await fs.readFile(resolvedViteConfigPath, \"utf8\");\n\n\t\tconst has100Value = rawContent.match(regex100);\n\n\t\tif (has100Value) {\n\t\t\treturn {\n\t\t\t\tlines: 100,\n\t\t\t\tbranches: 100,\n\t\t\t\tfunctions: 100,\n\t\t\t\tstatements: 100,\n\t\t\t};\n\t\t}\n\n\t\tconst lines = rawContent.match(regexLines);\n\t\tconst branches = rawContent.match(regexBranches);\n\t\tconst functions = rawContent.match(regexFunctions);\n\t\tconst statements = rawContent.match(regexStatements);\n\n\t\treturn {\n\t\t\tlines: lines ? Number.parseInt(lines[1]) : undefined,\n\t\t\tbranches: branches ? Number.parseInt(branches[1]) : undefined,\n\t\t\tfunctions: functions ? Number.parseInt(functions[1]) : undefined,\n\t\t\tstatements: statements ? Number.parseInt(statements[1]) : undefined,\n\t\t};\n\t} catch (err: unknown) {\n\t\tcore.warning(\n\t\t\t`Could not read vite config file for thresholds due to an error:\\n ${err}`,\n\t\t);\n\t\treturn {};\n\t}\n};\n\nexport { parseCoverageThresholds };\n", "import * as core from \"@actions/core\";\n\ntype CommentOn = \"pr\" | \"commit\" | \"none\";\n\nfunction getCommentOn(): CommentOn[] {\n\tconst commentOnInput = core.getInput(\"comment-on\");\n\tif (commentOnInput === \"none\") {\n\t\treturn [];\n\t}\n\n\tconst commentOnList = commentOnInput.split(\",\").map((item) => item.trim());\n\n\tlet validCommentOnValues: Array<CommentOn> = [];\n\tconst invalidCommentOnValues: string[] = [];\n\n\tfor (const value of commentOnList) {\n\t\tif (value === \"pr\" || value === \"commit\") {\n\t\t\tvalidCommentOnValues.push(value as CommentOn);\n\t\t} else {\n\t\t\tinvalidCommentOnValues.push(value);\n\t\t}\n\t}\n\n\tif (validCommentOnValues.length === 0) {\n\t\tcore.warning(\n\t\t\t`No valid options for comment-on found. Falling back to default value \"pr\".`,\n\t\t);\n\t\tvalidCommentOnValues = [\"pr\"];\n\t\treturn validCommentOnValues;\n\t}\n\n\tif (invalidCommentOnValues.length > 0) {\n\t\tcore.warning(\n\t\t\t`Invalid options for comment-on: ${invalidCommentOnValues.join(\", \")}. Valid options are \"pr\" and \"commit\".`,\n\t\t);\n\t}\n\n\treturn validCommentOnValues;\n}\n\nexport { getCommentOn };\n\nexport type { CommentOn };\n", "import { readFile } from \"node:fs/promises\";\nimport path from \"node:path\";\nimport * as core from \"@actions/core\";\nimport { stripIndent } from \"common-tags\";\nimport type { JsonFinal } from \"../types/JsonFinal\";\nimport type { JsonSummary } from \"../types/JsonSummary\";\n\nconst parseVitestCoverageReport = async <type extends JsonSummary | JsonFinal>(\n\tjsonPath: string,\n): Promise<type> => {\n\tconst resolvedJsonSummaryPath = path.resolve(process.cwd(), jsonPath);\n\tconst jsonSummaryRaw = await readFile(resolvedJsonSummaryPath);\n\treturn JSON.parse(jsonSummaryRaw.toString()) as type;\n};\n\nconst parseVitestJsonSummary = async (\n\tjsonSummaryPath: string,\n): Promise<JsonSummary> => {\n\ttry {\n\t\treturn await parseVitestCoverageReport<JsonSummary>(jsonSummaryPath);\n\t} catch (err: unknown) {\n\t\tconst stack = err instanceof Error ? err.stack : \"\";\n\t\tcore.setFailed(stripIndent`\n        Failed to parse the json-summary at path \"${jsonSummaryPath}.\"\n        Make sure to run vitest before this action and to include the \"json-summary\" reporter.\n\n        Original Error:\n        ${stack}\n    `);\n\n\t\t// Rethrow to abort the entire workflow\n\t\tthrow err;\n\t}\n};\n\nconst parseVitestJsonFinal = async (\n\tjsonFinalPath: string,\n): Promise<JsonFinal> => {\n\ttry {\n\t\treturn await parseVitestCoverageReport<JsonFinal>(jsonFinalPath);\n\t} catch (err: unknown) {\n\t\tconst stack = err instanceof Error ? err.stack : \"\";\n\t\tcore.warning(stripIndent`\n      Failed to parse JSON Final at path \"${jsonFinalPath}\".\n      Line coverage will be empty. To include it, make sure to include the \"json\" reporter in your vitest execution.\n\n      Original Error:\n      ${stack}\n    `);\n\t\treturn {};\n\t}\n};\n\nexport { parseVitestJsonSummary, parseVitestJsonFinal };\n", "import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\n\ntype Octokit = ReturnType<typeof github.getOctokit>;\n\nconst createOctokit = (): Octokit => {\n\tconst token = core.getInput(\"github-token\").trim();\n\treturn github.getOctokit(token);\n};\n\nexport { createOctokit };\n\nexport type { Octokit };\n", "import * as github from \"@actions/github\";\n\nconst generateCommitSHAUrl = (commitSHA: string) => {\n\treturn [\n\t\tgithub.context.serverUrl,\n\t\tgithub.context.repo.owner,\n\t\tgithub.context.repo.repo,\n\t\t\"commit\",\n\t\tcommitSHA,\n\t].join(\"/\");\n};\n\nexport { generateCommitSHAUrl };\n", "import * as path from \"node:path\";\nimport { oneLine } from \"common-tags\";\nimport { FileCoverageMode } from \"../inputs/FileCoverageMode\";\nimport type { JsonFinal } from \"../types/JsonFinal\";\nimport type { JsonSummary } from \"../types/JsonSummary\";\nimport { generateBlobFileUrl } from \"./generateFileUrl\";\nimport {\n\ttype LineRange,\n\tgetUncoveredLinesFromStatements,\n} from \"./getUncoveredLinesFromStatements\";\n\ntype FileCoverageInputs = {\n\tjsonSummary: JsonSummary;\n\tjsonFinal: JsonFinal;\n\tfileCoverageMode: FileCoverageMode;\n\tpullChanges: string[];\n\tcommitSHA: string;\n};\n\nconst workspacePath = process.cwd();\nconst generateFileCoverageHtml = ({\n\tjsonSummary,\n\tjsonFinal,\n\tfileCoverageMode,\n\tpullChanges,\n\tcommitSHA,\n}: FileCoverageInputs) => {\n\tconst filePaths = Object.keys(jsonSummary).filter((key) => key !== \"total\");\n\n\tconst formatFileLine = (filePath: string) => {\n\t\tconst coverageSummary = jsonSummary[filePath];\n\t\tconst lineCoverage = jsonFinal[filePath];\n\n\t\t// LineCoverage might be empty if coverage-final.json was not provided.\n\t\tconst uncoveredLines = lineCoverage\n\t\t\t? getUncoveredLinesFromStatements(jsonFinal[filePath])\n\t\t\t: [];\n\t\tconst relativeFilePath = path.relative(workspacePath, filePath);\n\t\tconst url = generateBlobFileUrl(relativeFilePath, commitSHA);\n\n\t\treturn `\n      <tr>\n        <td align=\"left\"><a href=\"${url}\">${relativeFilePath}</a></td>\n        <td align=\"right\">${coverageSummary.statements.pct}%</td>\n        <td align=\"right\">${coverageSummary.branches.pct}%</td>\n        <td align=\"right\">${coverageSummary.functions.pct}%</td>\n        <td align=\"right\">${coverageSummary.lines.pct}%</td>\n        <td align=\"left\">${createRangeURLs(uncoveredLines, url)}</td>\n      </tr>`;\n\t};\n\n\tlet reportData = \"\";\n\n\tconst [changedFiles, unchangedFiles] = splitFilesByChangeStatus(\n\t\tfilePaths,\n\t\tpullChanges,\n\t);\n\n\tif (\n\t\tfileCoverageMode === FileCoverageMode.Changes &&\n\t\tchangedFiles.length === 0\n\t) {\n\t\treturn \"No changed files found.\";\n\t}\n\n\tif (changedFiles.length > 0) {\n\t\treportData += `\n\t\t\t${formatGroupLine(\"Changed Files\")} \n\t\t\t${changedFiles.map(formatFileLine).join(\"\")}\n\t\t`;\n\t}\n\n\tif (fileCoverageMode === FileCoverageMode.All && unchangedFiles.length > 0) {\n\t\treportData += `\n\t\t\t${formatGroupLine(\"Unchanged Files\")}\n\t\t\t${unchangedFiles.map(formatFileLine).join(\"\")}\n\t\t`;\n\t}\n\n\treturn oneLine`\n    <table>\n      <thead>\n        <tr>\n         <th align=\"left\">File</th>\n         <th align=\"right\">Stmts</th>\n         <th align=\"right\">% Branch</th>\n         <th align=\"right\">% Funcs</th>\n         <th align=\"right\">% Lines</th>\n         <th align=\"left\">Uncovered Lines</th>\n        </tr>\n      </thead>\n      <tbody>\n      ${reportData}\n      </tbody>\n    </table>\n  `;\n};\n\nfunction formatGroupLine(caption: string): string {\n\treturn `\n\t\t<tr>\n\t\t\t<td align=\"left\" colspan=\"6\"><b>${caption}</b></td>\n\t\t</tr>\n\t`;\n}\n\nfunction createRangeURLs(uncoveredLines: LineRange[], url: string): string {\n\treturn uncoveredLines\n\t\t.map((range) => {\n\t\t\tlet linkText = `${range.start}`;\n\t\t\tlet urlHash = `#L${range.start}`;\n\n\t\t\tif (range.start !== range.end) {\n\t\t\t\tlinkText += `-${range.end}`;\n\t\t\t\turlHash += `-L${range.end}`;\n\t\t\t}\n\n\t\t\treturn `<a href=\"${url}${urlHash}\" class=\"text-red\">${linkText}</a>`;\n\t\t})\n\t\t.join(\", \");\n}\n\nfunction splitFilesByChangeStatus(\n\tfilePaths: string[],\n\tpullChanges: string[],\n): [string[], string[]] {\n\treturn filePaths.reduce(\n\t\t([changedFiles, unchangedFiles], filePath) => {\n\t\t\t// Pull Changes has filePaths relative to the git repository, whereas the jsonSummary has filePaths relative to the workspace.\n\t\t\t// So we have to convert the filePaths to be relative to the workspace.\n\t\t\tconst comparePath = path.relative(workspacePath, filePath);\n\t\t\tif (pullChanges.includes(comparePath)) {\n\t\t\t\tchangedFiles.push(filePath);\n\t\t\t} else {\n\t\t\t\tunchangedFiles.push(filePath);\n\t\t\t}\n\t\t\treturn [changedFiles, unchangedFiles];\n\t\t},\n\t\t[[], []] as [string[], string[]],\n\t);\n}\n\nexport { generateFileCoverageHtml };\n", "import * as github from \"@actions/github\";\n\nconst generateBlobFileUrl = (relativeFilePath: string, commitSHA: string) => {\n\treturn [\n\t\tgithub.context.serverUrl,\n\t\tgithub.context.repo.owner,\n\t\tgithub.context.repo.repo,\n\t\t\"blob\",\n\t\tcommitSHA,\n\t\trelativeFilePath,\n\t].join(\"/\");\n};\n\nexport { generateBlobFileUrl };\n", "import type { StatementCoverageReport } from \"../types/JsonFinal\";\n\ntype LineRange = {\n\tstart: number;\n\tend: number;\n};\n\nconst getUncoveredLinesFromStatements = ({\n\ts,\n\tstatementMap,\n}: StatementCoverageReport): LineRange[] => {\n\tconst keys = Object.keys(statementMap);\n\n\tconst uncoveredLineRanges = keys.reduce<LineRange[]>((acc, key) => {\n\t\tif (s[key] === 0) {\n\t\t\tconst lastRange = acc.at(-1);\n\n\t\t\tif (lastRange && lastRange.end === statementMap[key].start.line - 1) {\n\t\t\t\tlastRange.end = statementMap[key].end.line;\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tacc.push({\n\t\t\t\tstart: statementMap[key].start.line,\n\t\t\t\tend: statementMap[key].end.line,\n\t\t\t});\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\treturn uncoveredLineRanges;\n};\n\nexport { getUncoveredLinesFromStatements };\n\nexport type { LineRange };\n", "type HeadlineArgs = {\n\tworkingDirectory?: string;\n\tname?: string;\n};\n\nfunction generateHeadline(options: HeadlineArgs) {\n\tif (options.name && options.workingDirectory !== \"./\") {\n\t\treturn `Coverage Report for ${options.name} (${options.workingDirectory})`;\n\t}\n\n\tif (options.name) {\n\t\treturn `Coverage Report for ${options.name}`;\n\t}\n\n\tif (options.workingDirectory !== \"./\") {\n\t\treturn `Coverage Report for ${options.workingDirectory}`;\n\t}\n\n\treturn \"Coverage Report\";\n}\n\nexport { generateHeadline };\n", "import { oneLine } from \"common-tags\";\nimport { icons } from \"../icons\";\nimport type { CoverageReport, ReportNumbers } from \"../types/JsonSummary\";\nimport type { Thresholds } from \"../types/Threshold\";\n\nfunction generateSummaryTableHtml(\n\tjsonReport: CoverageReport,\n\tthresholds: Thresholds = {},\n\tjsonCompareReport: CoverageReport | undefined = undefined,\n): string {\n\treturn oneLine`\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t <th align=\"center\">Status</th>\n\t\t\t\t <th align=\"left\">Category</th>\n\t\t\t\t <th align=\"right\">Percentage</th>\n\t\t\t\t <th align=\"right\">Covered / Total</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.lines, category: \"Lines\", threshold: thresholds.lines, reportCompareNumbers: jsonCompareReport?.lines })}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.statements, category: \"Statements\", threshold: thresholds.statements, reportCompareNumbers: jsonCompareReport?.statements })}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.functions, category: \"Functions\", threshold: thresholds.functions, reportCompareNumbers: jsonCompareReport?.functions })}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.branches, category: \"Branches\", threshold: thresholds.branches, reportCompareNumbers: jsonCompareReport?.branches })}\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t`;\n}\n\nfunction generateTableRow({\n\treportNumbers,\n\tcategory,\n\tthreshold,\n\treportCompareNumbers,\n}: {\n\treportNumbers: ReportNumbers;\n\tcategory: string;\n\tthreshold?: number;\n\treportCompareNumbers?: ReportNumbers;\n}): string {\n\tlet status = icons.blue;\n\tlet percent = `${reportNumbers.pct}%`;\n\n\tif (threshold) {\n\t\tpercent = `${percent} (${icons.target} ${threshold}%)`;\n\t\tstatus = reportNumbers.pct >= threshold ? icons.green : icons.red;\n\t}\n\n\tif (reportCompareNumbers) {\n\t\tconst percentDiff = reportNumbers.pct - reportCompareNumbers.pct;\n\t\tconst compareString = getCompareString(percentDiff);\n\t\tpercent = `${percent}<br/>${compareString}`;\n\t}\n\n\treturn `\n    <td align=\"center\">${status}</td>\n    <td align=\"left\">${category}</td>\n\t\t<td align=\"right\">${percent}</td>\n    <td align=\"right\">${reportNumbers.covered} / ${reportNumbers.total}</td>\n  `;\n}\n\nfunction getCompareString(percentDiff: number): string {\n\tif (percentDiff === 0) {\n\t\treturn `${icons.equal} <em>\u00B10%</em>`;\n\t}\n\n\tif (percentDiff > 0) {\n\t\treturn `${icons.increase} <em>+${percentDiff.toFixed(2)}%</em>`;\n\t}\n\n\t// The - char is already included in a negative number\n\treturn `${icons.decrease} <em>${percentDiff.toFixed(2)}%</em>`;\n}\n\nexport { generateSummaryTableHtml };\n", "const icons = {\n\tred: \"\uD83D\uDD34\",\n\tgreen: \"\uD83D\uDFE2\",\n\tblue: \"\uD83D\uDD35\",\n\tincrease: \"\u2B06\uFE0F\",\n\tdecrease: \"\u2B07\uFE0F\",\n\tequal: \"\uD83D\uDFF0\",\n\ttarget: \"\uD83C\uDFAF\",\n};\n\nexport { icons };\n", "import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport type { Octokit } from \"./octokit\";\n\nconst writeSummaryToCommit = async ({\n\toctokit,\n\tsummary,\n\tcommitSha,\n}: {\n\toctokit: Octokit;\n\tsummary: typeof core.summary;\n\tcommitSha: string;\n}) => {\n\tif (!commitSha) {\n\t\tcore.info(\"No commit SHA found. Skipping comment creation.\");\n\t\treturn;\n\t}\n\n\tconst commentBody = summary.stringify();\n\n\tawait octokit.rest.repos.createCommitComment({\n\t\towner: github.context.repo.owner,\n\t\trepo: github.context.repo.repo,\n\t\tcommit_sha: commitSha,\n\t\tbody: commentBody,\n\t});\n};\n\nexport { writeSummaryToCommit };\n", "import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport type { Octokit } from \"./octokit\";\n\nconst COMMENT_MARKER = (markerPostfix = \"root\") =>\n\t`<!-- vitest-coverage-report-marker-${markerPostfix} -->`;\n\nconst writeSummaryToPR = async ({\n\toctokit,\n\tsummary,\n\tmarkerPostfix,\n\tprNumber,\n}: {\n\toctokit: Octokit;\n\tsummary: typeof core.summary;\n\tmarkerPostfix?: string;\n\tprNumber?: number;\n}) => {\n\t// The user-defined pull request number takes precedence\n\tif (!prNumber) {\n\t\tcore.info(\"No pull-request-number found. Skipping comment creation.\");\n\t\treturn;\n\t}\n\n\tconst commentBody = `${summary.stringify()}\\n\\n${COMMENT_MARKER(markerPostfix)}`;\n\tconst existingComment = await findCommentByBody(\n\t\toctokit,\n\t\tCOMMENT_MARKER(markerPostfix),\n\t\tprNumber,\n\t);\n\n\tif (existingComment) {\n\t\tawait octokit.rest.issues.updateComment({\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tcomment_id: existingComment.id,\n\t\t\tbody: commentBody,\n\t\t});\n\t} else {\n\t\tawait octokit.rest.issues.createComment({\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tissue_number: prNumber,\n\t\t\tbody: commentBody,\n\t\t});\n\t}\n};\n\nasync function findCommentByBody(\n\toctokit: Octokit,\n\tcommentBodyIncludes: string,\n\tpullRequestNumber: number,\n) {\n\tconst commentsIterator = octokit.paginate.iterator(\n\t\toctokit.rest.issues.listComments,\n\t\t{\n\t\t\towner: github.context.repo.owner,\n\t\t\trepo: github.context.repo.repo,\n\t\t\tissue_number: pullRequestNumber,\n\t\t},\n\t);\n\n\tfor await (const { data: comments } of commentsIterator) {\n\t\tconst comment = comments.find((comment) =>\n\t\t\tcomment.body?.includes(commentBodyIncludes),\n\t\t);\n\t\tif (comment) return comment;\n\t}\n\n\treturn;\n}\n\nexport { writeSummaryToPR };\n"],
  "mappings": "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",
  "names": ["core", "github", "import_request_error", "core", "FileCoverageMode", "getCoverageModeFrom", "input", "core", "github", "import_request_error", "getPullChanges", "fileCoverageMode", "prNumber", "octokit", "paths", "iterator", "response", "file", "error", "path", "core", "github", "isPRContext", "context", "getCommitSHA", "core", "github", "getPullRequestNumber", "octokit", "prNumberFromInput", "processedPrNumber", "sha", "prNumber", "fetchPRsByListingPRsForCommit", "fetchPRsByListingAllPRs", "headSha", "pullRequestsIterator", "pullRequests", "pullRequest", "import_node_fs", "import_node_path", "core", "import_common_tags", "testFilePath", "workingDirectory", "filePath", "resolvedPath", "path", "fs", "defaultPaths", "getViteConfigPath", "input", "searchPath", "import_node_fs", "import_node_path", "core", "regex100", "regexStatements", "regexLines", "regexBranches", "regexFunctions", "parseCoverageThresholds", "vitestConfigPath", "resolvedViteConfigPath", "path", "rawContent", "fs", "lines", "branches", "functions", "statements", "err", "core", "getCommentOn", "commentOnInput", "commentOnList", "item", "validCommentOnValues", "invalidCommentOnValues", "value", "readOptions", "octokit", "workingDirectory", "fileCoverageModeRaw", "fileCoverageMode", "getCoverageModeFrom", "jsonSummaryPath", "jsonFinalPath", "jsonSummaryCompareInput", "jsonSummaryComparePath", "name", "commentOn", "getCommentOn", "viteConfigPath", "getViteConfigPath", "thresholds", "parseCoverageThresholds", "commitSHA", "getCommitSHA", "prNumber", "getPullRequestNumber", "import_promises", "import_node_path", "core", "import_common_tags", "parseVitestCoverageReport", "jsonPath", "resolvedJsonSummaryPath", "path", "jsonSummaryRaw", "parseVitestJsonSummary", "jsonSummaryPath", "err", "stack", "parseVitestJsonFinal", "jsonFinalPath", "core", "github", "createOctokit", "token", "github", "generateCommitSHAUrl", "commitSHA", "path", "import_common_tags", "github", "generateBlobFileUrl", "relativeFilePath", "commitSHA", "getUncoveredLinesFromStatements", "s", "statementMap", "acc", "key", "lastRange", "workspacePath", "generateFileCoverageHtml", "jsonSummary", "jsonFinal", "fileCoverageMode", "pullChanges", "commitSHA", "filePaths", "key", "formatFileLine", "filePath", "coverageSummary", "uncoveredLines", "getUncoveredLinesFromStatements", "relativeFilePath", "url", "generateBlobFileUrl", "createRangeURLs", "reportData", "changedFiles", "unchangedFiles", "splitFilesByChangeStatus", "formatGroupLine", "caption", "range", "linkText", "urlHash", "comparePath", "generateHeadline", "options", "import_common_tags", "icons", "generateSummaryTableHtml", "jsonReport", "thresholds", "jsonCompareReport", "generateTableRow", "reportNumbers", "category", "threshold", "reportCompareNumbers", "status", "icons", "percent", "percentDiff", "compareString", "getCompareString", "core", "github", "writeSummaryToCommit", "octokit", "summary", "commitSha", "commentBody", "core", "github", "COMMENT_MARKER", "markerPostfix", "writeSummaryToPR", "octokit", "summary", "prNumber", "commentBody", "existingComment", "findCommentByBody", "commentBodyIncludes", "pullRequestNumber", "commentsIterator", "comments", "comment", "_a", "import_axios", "validateSubscription", "API_URL", "axios", "error", "run", "octokit", "createOctokit", "options", "readOptions", "jsonSummary", "parseVitestJsonSummary", "jsonSummaryCompare", "summary", "generateHeadline", "generateSummaryTableHtml", "pullChanges", "getPullChanges", "jsonFinal", "parseVitestJsonFinal", "fileTable", "generateFileCoverageHtml", "commitSHAUrl", "generateCommitSHAUrl", "getWorkflowSummaryURL", "commentOnPR", "commentOnCommit", "writeSummaryToPR", "getMarkerPostfix", "writeSummaryToCommit", "name", "workingDirectory", "owner", "repo", "runId", "err"]
}
